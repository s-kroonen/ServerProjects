@page "/login"
@inject BeerTap.Services.UserService UserService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="loginForm">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="mb-3">
		<label class="form-label">User ID</label>
		<InputText @bind-Value="loginModel.UserId" class="form-control" />
		<ValidationMessage For="() => loginModel.UserId" />
	</div>

	<div class="mb-3">
		<label class="form-label">PIN (optional)</label>
		<InputText @bind-Value="loginModel.Pin" type="password" class="form-control" />
		<ValidationMessage For="() => loginModel.Pin" />
	</div>

	<button type="submit" class="btn btn-success">Login</button>
</EditForm>

@if (loginError)
{
	<div class="alert alert-danger mt-2">Invalid credentials. Please try again.</div>
}

@code {
	[Parameter]
	[SupplyParameterFromQuery]
	public string? ReturnUrl { get; set; }

	private LoginModel loginModel = new();
	private bool loginError = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await UserService.TryRestoreSessionAsync();

			if (UserService.IsAuthenticated && !string.IsNullOrEmpty(ReturnUrl))
			{
				NavigationManager.NavigateTo(ReturnUrl);
			}
		}
	}

	private async Task HandleLogin()
	{
		loginError = false;

		var isLoggedIn = await UserService.SignInAsync(loginModel.UserId, loginModel.Pin);

		if (isLoggedIn)
		{
			if (!string.IsNullOrEmpty(ReturnUrl))
				NavigationManager.NavigateTo(ReturnUrl);
			else
				NavigationManager.NavigateTo("/"); // fallback
		}
		else
		{
			loginError = true;
		}
	}

	public class LoginModel
	{
		[EditorRequired]
		public string UserId { get; set; }

		public string? Pin { get; set; }
	}
}
