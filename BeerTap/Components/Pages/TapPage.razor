@page "/tappage/{TapId}"
@inject BeerTap.Services.TapQueueManager TapQueueManager
@inject BeerTap.Services.MqttService MqttService
@inject BeerTap.Services.UserService UserService
@inject NavigationManager Navigation
@rendermode InteractiveServer
@implements IDisposable

<h3>Tap @TapId</h3>

@if (!@UserService.IsAuthenticated)
{
	<p>Redirecting to login...</p>
}
else
{
	<p>Welcome, @UserService._user.UserId!</p>

	@if (TapQueueManager.GetUserPosition(TapId, UserService._user.UserId) == -1)
	{
		<button class="btn btn-success" @onclick="JoinQueue">Join Queue</button>
	}
	else
	{
		<p>Your position in the queue: @QueuePosition</p>

		<p>Current amount: @CurrentAmount ml</p>
		<p>Status: @TapStatus</p>

		@if (CanTap)
		{
			<button class="btn btn-primary" @onclick="PourBeer">Pour Beer</button>
		}
		else
		{
			<p>Please wait your turn...</p>
		}

		<button class="btn btn-danger" @onclick="Cancel">Cancel</button>
	}

}

@code {
	[Parameter]
	public string TapId { get; set; } = string.Empty;
	private float CurrentAmount = 0;
	private string TapStatus = "idle";
	// private string? UserId;
	private int QueuePosition;
	private bool CanTap => TapQueueManager.IsUserNext(TapId, UserService._user.UserId!);
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await UserService.TryRestoreSessionAsync();
			if (!UserService.IsAuthenticated)
			{
				Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
			}
			else
			{
				await MqttService.SubscribeToTap(TapId);
			}
		}
	}
	protected override async void OnInitialized()
	{
		if (UserService.IsAuthenticated)
		{

			MqttService.OnAmountUpdated += OnAmountChanged;
			MqttService.OnStatusUpdated += OnStatusChanged;
			await TapQueueManager.EnqueueUser(TapId, UserService._user.UserId);
			TapQueueManager.CurrentUserChanged += OnQueueChanged;

			UpdateQueueInfo();
		}
	}

	private void UpdateQueueInfo()
	{
		QueuePosition = TapQueueManager.GetUserPosition(TapId, UserService._user.UserId);
		StateHasChanged();
		if (QueuePosition == 0)
		{
			MqttService.PublishTapCommand(TapId, "reset");
		}
	}

	private async Task PourBeer()
	{
		Console.WriteLine("PourStart");
		// QueueManager.DequeueUser(TapId);
		MqttService.PublishTapCommand(TapId, "start");
		// UpdateQueueInfo();
	}

	private Task Cancel()
	{
		TapQueueManager.Cancel(TapId, UserService._user.UserId);
		Navigation.NavigateTo("/");
		return Task.CompletedTask;
	}

	private void JoinQueue()
	{
		TapQueueManager.EnqueueUser(TapId, UserService._user.UserId);
		UpdateQueueInfo();
	}

	private void OnQueueChanged(string tap, string user)
	{
		if (tap == TapId)
		{
			InvokeAsync(() =>
			{
				UpdateQueueInfo();
				StateHasChanged();
			});
		}
	}

	private void OnAmountChanged(string tap, float amount)
	{
		if (tap == TapId)
		{
			CurrentAmount = amount;
			InvokeAsync(StateHasChanged);
		}
	}

	private void OnStatusChanged(string tap, string status)
	{
		if (tap == TapId)
		{
			TapStatus = status;
			if (TapStatus == "done")
			{
				UserService.AddAmount(UserService._user.UserId, CurrentAmount);
			}
			InvokeAsync(StateHasChanged);
		}
	}
	public void Dispose()
	{
		TapQueueManager.CurrentUserChanged -= OnQueueChanged;
		MqttService.OnAmountUpdated -= OnAmountChanged;
		MqttService.OnStatusUpdated -= OnStatusChanged;
	}
}
