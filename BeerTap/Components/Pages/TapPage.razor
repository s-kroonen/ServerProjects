@page "/tappage/{TapId}"
@inject BeerTap.Services.TapQueueManager QueueManager
@inject BeerTap.Services.MqttService MqttService
@inject BeerTap.Services.UserService UserService
@inject NavigationManager Navigation
@rendermode InteractiveServer
@implements IDisposable  

<h3>Tap @TapId</h3>

@if (@UserService._user == null )
{
    <p>Redirecting to login...</p>
}
else
{
    <p>Welcome, @UserService._user.UserId!</p>

    @if (QueueManager.GetUserPosition(TapId, UserService._user.UserId) == -1)
    {
        <button class="btn btn-success" @onclick="JoinQueue">Join Queue</button>
    }
    else
    {
        <p>Your position in the queue: @QueuePosition</p>

        <p>Current amount: @CurrentAmount ml</p>
        <p>Status: @TapStatus</p>

        @if (CanTap)
        {
            <button class="btn btn-primary" @onclick="PourBeer">Pour Beer</button>
        }
        else
        {
            <p>Please wait your turn...</p>
        }

        <button class="btn btn-danger" @onclick="Cancel">Cancel</button>
    }

}

@code {
    [Parameter]
    public string TapId { get; set; } = string.Empty;
    private int CurrentAmount = 0;
    private string TapStatus = "idle";
    // private string? UserId;
    private int QueuePosition;
    private bool CanTap => QueueManager.IsUserNext(TapId, UserService._user.UserId!);
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UserService.TryRestoreSessionAsync();
            if (UserService._user == null)
            {
                Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
            }
            StateHasChanged();
        }
    }
    protected override async void OnInitialized()
    {
        if (UserService._user != null)
        {
            MqttService.SubscribeToTap(TapId);

            MqttService.OnAmountUpdated += OnAmountChanged;
            MqttService.OnStatusUpdated += OnStatusChanged;
            QueueManager.EnqueueUser(TapId, UserService._user.UserId);
            QueueManager.CurrentUserChanged += OnQueueChanged;

            UpdateQueueInfo();
        }
    }

    private void UpdateQueueInfo()
    {
        QueuePosition = QueueManager.GetUserPosition(TapId, UserService._user.UserId);
        StateHasChanged();
    }

    private async Task PourBeer()
    {
        Console.WriteLine("PourStart");
        // QueueManager.DequeueUser(TapId);
        MqttService.PublishTapCommand(TapId, "start");
        UpdateQueueInfo();
    }

    private Task Cancel()
    {
        QueueManager.Cancel(TapId, UserService._user.UserId);
        Navigation.NavigateTo("/");
        return Task.CompletedTask;
    }

    private void JoinQueue()
    {
        QueueManager.EnqueueUser(TapId, UserService._user.UserId);
        UpdateQueueInfo();
    }

    private void OnQueueChanged(string tap, string user)
    {
        if (tap == TapId)
        {
            InvokeAsync(() =>
            {
                UpdateQueueInfo();
                StateHasChanged();
            });
        }
    }

    private void OnAmountChanged(string tap, int amount)
    {
        if (tap == TapId)
        {
            CurrentAmount = amount;
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnStatusChanged(string tap, string status)
    {
        if (tap == TapId)
        {
            TapStatus = status;
            InvokeAsync(StateHasChanged);
        }
    }
    public void Dispose()
    {
        QueueManager.CurrentUserChanged -= OnQueueChanged;
        MqttService.OnAmountUpdated -= OnAmountChanged;
        MqttService.OnStatusUpdated -= OnStatusChanged;
    }
}
